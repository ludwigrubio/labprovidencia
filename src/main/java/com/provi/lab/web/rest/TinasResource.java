package com.provi.lab.web.rest;

import com.provi.lab.domain.*;
import com.provi.lab.service.*;
import io.github.jhipster.web.util.HeaderUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.ZoneId;
import java.time.ZonedDateTime;

/**
 * REST controller for managing {@link LogLactoEscan}.
 */
@RestController
@RequestMapping("/api")
public class TinasResource {

    private final Logger log = LoggerFactory.getLogger(TinasResource.class);

    private static final String ENTITY_NAME = "logLactoEscan";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;


    private final UserService userService;
    private final UserExtraService userExtraService;
    private final ProcesoService procesoService;
    private final PersonalService personalService;

    private final FQLecheService fqLecheService;
    private final FQQuesoService fqQuesoService;
    private final FQSueroService fqSueroService;
    private final FQCremaService fqCremaService;
    private final PruebaMicroService pruebaMicroService;

    public TinasResource(UserService userService,
                         UserExtraService userExtraService,
                         ProcesoService procesoService,
                         PersonalService personalService,
                         FQLecheService fqLecheService,
                         FQQuesoService fqQuesoService,
                         FQSueroService fqSueroService,
                         FQCremaService fqCremaService,
                         PruebaMicroService pruebaMicroService){
        this.userService = userService;
        this.userExtraService = userExtraService;
        this.procesoService = procesoService;
        this.personalService = personalService;
        this.fqLecheService = fqLecheService;
        this.fqQuesoService = fqQuesoService;
        this.fqSueroService = fqSueroService;
        this.fqCremaService = fqCremaService;
        this.pruebaMicroService = pruebaMicroService;
    }

    /**
     * {@code GET  /tinas/creacion/:id} : create by tinas count.
     *
     * @param count the count of tinas.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} or with status {@code 404 (Not Found)}.
     */
    @GetMapping("/tinas/creacion/{count}")
    public ResponseEntity<Void> createTinasByCount(@PathVariable Long count) {
        log.debug("Request to create number of tinas : {}", count);

        ZonedDateTime zdt = ZonedDateTime.now(ZoneId.systemDefault());
        UserExtra analista = userExtraService.findOne(userService.getUserWithAuthorities().get().getId()).get();
        Proceso proceso1 = procesoService.findOne(new Long(100)).get();
        Personal personal = personalService.findOne(new Long(1)).get();


        FQLeche fqLeche = new FQLeche();
        fqLeche.setFecha(zdt.toInstant());
        fqLeche.setLote(zdt.getYear()+""+zdt.getDayOfYear());
        fqLeche.setAnalista(analista);
        fqLeche.setProveedor(personal);
        fqLeche.setProceso(proceso1);
        fqLeche.setArea(analista.getArea());
        FQLeche fq = fqLecheService.save(fqLeche);

        //log.debug("New autogenerated FQLeche by Recepcion {}",fq);

        /*Create 3 FQ Leche*/
        /*Create 1 FQ Crema*/
        /*Create 2 FQ Suero*/
        /*Create 2 FQ Queso*/
        /*Create 7 MB
        *   -4 PRODUCTO
        *   -3 SUPERFICIE*/

        return ResponseEntity.noContent().headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, count.toString())).build();

    }
}
